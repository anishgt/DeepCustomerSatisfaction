mydata=unique(mydata)
mynames=c("Restaurant", "RestaurantID", "AvgRating","AuthorName","Id","NumberOfFriends", "NumberOfReviews","Rating", "Review", "Date", "Class")
names(mydata)=mynames
fakedata = read.csv("/media/pragati/New Volume/ssrivas6/MLProject/OutputBR.csv", sep="|")
names(fakedata)=mynames
uni = as.character(unique(fakedata$RestaurantID))
fakedata=unique(fakedata)
uni = as.character(unique(fakedata$RestaurantID))
for(i in uni){
indx=which(mydata$RestaurantID==i)[1]
res.name=as.character(mydata$Restaurant[indx])
res.rating=as.numeric(mydata$AvgRating[indx])
indexes=which(fakedata$RestaurantID==i)
for(x in indexes){
fakedata$Restaurant[x]=res.name
fakedata$AvgRating[x]=res.rating
}
}
nrow(fakedata)
head(fakedata)
nrow(mydata)
mydata=rbind(mydata,fakedata)
nrow(mydata)
tail(mydata)
mydata = read.csv("/media/pragati/New Volume/ssrivas6/MLProject/Output.csv", sep="|")
mydata = read.csv("/media/pragati/New Volume/ssrivas6/MLProject/Output.csv", sep="|")
mydata=unique(mydata)
mynames=c("Restaurant", "RestaurantID", "AvgRating","AuthorName","Id","NumberOfFriends", "NumberOfReviews","Rating", "Review", "Date", "Class")
names(mydata)=mynames
fakedata = read.csv("/media/pragati/New Volume/ssrivas6/MLProject/OutputBR.csv", sep="|")
names(fakedata)=mynames
fakedata=unique(fakedata)
uni = as.character(unique(fakedata$RestaurantID))
for(i in uni){
indx=which(mydata$RestaurantID==i)[1]
res.name=as.character(mydata$Restaurant[indx])
res.rating=as.numeric(mydata$AvgRating[indx])
indexes=which(fakedata$RestaurantID==i)
for(x in indexes){
fakedata$Restaurant[x]=res.name
fakedata$AvgRating[x]=res.rating
}
}
nrow(mydata)
nrow(fakedata)
mydata=rbind(mydata,fakedata)
length(mydata)
length(unique(mydata))
nrow(unique(mydata))
nrow(mydata)
mydata=unique(mydata)
nrow(mydata)
mydata$Date=regmatches(mydata$Date,gregexpr("\\d{1,2}/\\d{1,2}/\\d{4}",mydata$Date,perl=TRUE))
nrow(mydata)
summary(mydata)
head(mydata)
class(mydata$Date)
class(mydata$RestaurantID)
a= fakedata[!grepl("This review has been removed for violating our Terms of Service", fakedata$Review),]
a
b= fakedata[grepl("This review has been removed for violating our Terms of Service", fakedata$Review),]
head(b)
nrow(b)
mydata= mydata[!grepl("This review has been removed for violating our Terms of Service", mydata$Review),]
nrow(mydata)
write.csv(mydata, file = "mydatafinal.csv",row.names=FALSE, na="")
mydata = read.csv("/media/pragati/New Volume/ssrivas6/MLProject/Output.csv", sep="|")
mydata=unique(mydata)
mynames=c("Restaurant", "RestaurantID", "AvgRating","AuthorName","Id","NumberOfFriends", "NumberOfReviews","Rating", "Review", "Date", "Class")
names(mydata)=mynames
fakedata = read.csv("/media/pragati/New Volume/ssrivas6/MLProject/OutputBR.csv", sep="|")
names(fakedata)=mynames
fakedata=unique(fakedata)
uni = as.character(unique(fakedata$RestaurantID))
for(i in uni){
indx=which(mydata$RestaurantID==i)[1]
res.name=as.character(mydata$Restaurant[indx])
res.rating=as.numeric(mydata$AvgRating[indx])
indexes=which(fakedata$RestaurantID==i)
for(x in indexes){
fakedata$Restaurant[x]=res.name
fakedata$AvgRating[x]=res.rating
}
}
mydata=rbind(mydata,fakedata)
mydata=unique(mydata)
nrow(mydata)
mydata= mydata[!grepl("This review has been removed for violating our Terms of Service", mydata$Review),]
nrow(mydata)
write.csv(mydata, file = "/media/pragati/New Volume/ssrivas6/MLProject/MyDataFinal.csv",row.names=FALSE, na="")
nrow(mydata)
mydata$Date=regmatches(mydata$Date,gregexpr("\\d{1,2}/\\d{1,2}/\\d{4}",mydata$Date,perl=TRUE))
nrow(mydata)
mydatafinal = read.csv("/media/pragati/New Volume/ssrivas6/MLProject/MyDataFinal.csv")
head(mydatafinal)
summary(mydatafinal)
nrow(unique((mydatafinal))
)
nrow(mydatafinal)
q()
getwd()
clust=read.table("4.clusters", header=F, sep=";")
clust=read.table("4.clusters.txt", header=F, sep=";")
clust=read.table("4.clusters.txt", header=F, sep=";")
clust
clust=read.table("4.clusters", header=F)
clust
clust=read.table("4.clusters", header=F, sep="\n")
clust
clust[1]
class(clust)
clust$V1[1]
clust$V1[2]
clust$V1[6]
vec.new=rep(0, 480)
length(vec.new)
clusters=1
for (i in clust$V1){
if(length(i)==1){
vec.new[i]=0
} else {
for( j in i){
vec.new[j]=clusters
}
clusters=cluster+1
}
}
vec.new
class(vec.new)
vec.new=rep(0, 480)
clusters=1
for (i in clust$V1){
if(length(i)==1){
vec.new[as.numeric(i)]=0
} else {
for( j in i){
vec.new[as.numeric(j)]=clusters
}
clusters=cluster+1
}
}
vec.new
class(clust$V1)
clusters=1
for (i in as.vector(clust$V1)){
if(length(i)==1){
vec.new[as.numeric(i)]=0
} else {
for( j in i){
vec.new[as.numeric(j)]=clusters
}
clusters=cluster+1
}
}
vec.new
class(clust$V1[6])
clust$V1[6]
strsplit(clust$V1[6], ",")
strsplit(as.string(clust$V1[6]), ",")
strsplit(as.character(clust$V1[6]), ",")
as.vector(as.numeric(strsplit(as.character(clust$V1[6]), ",")))
as.vector(strsplit(as.character(clust$V1[6]), ","))
clusters=1
for (k in clust$V1){
i=(strsplit(as.character(k), ",")[[1]]
if(length(i)==1){
vec.new[as.numeric(i)]=0
} else {
for( j in i){
vec.new[as.numeric(j)]=clusters
}
clusters=cluster+1
}
}
clusters=1
for (k in clust$V1){
i=(strsplit(as.character(k), ","))[[1]]
if(length(i)==1){
vec.new[as.numeric(i)]=0
} else {
for( j in i){
vec.new[as.numeric(j)]=clusters
}
clusters=clusters+1
}
}
vec.new
clusters=1
for (k in clust$V1){
i=(strsplit(as.character(k), ","))[[1]]
if(length(i)==1){
vec.new[as.numeric(i)+1]=0
} else {
for( j in i){
vec.new[as.numeric(j)+1]=clusters
}
clusters=clusters+1
}
}
vec.new
q()
pca=TRUE
pca==TRUE
pca==FALSE
pca==1
pca
!pca
train <- read.csv('santander/train.csv',na.strings=c(""))
test <- read.csv('santander/test.csv',na.strings=c(""))
setwd("~/Git_Pragati/DeepCustomerSatisfaction")
train <- read.csv('santander/train.csv',na.strings=c(""))
test <- read.csv('santander/test.csv',na.strings=c(""))
dataset= train
dataset.id = dataset$ID
dataset.y <- dataset$TARGET
dataset$TARGET <- NULL
dataset$ID <- NULL
#test$ID <- NULL
# Removing constant values
for(colname in names(dataset))
{
if(length(unique(dataset[[colname]]))==1)
{
dataset[[colname]] <- NULL
#test[[colname]] <- NULL
}
}
features_pair <- combn(names(dataset), 2, simplify = F)
toRemove <- c()
for(pair in features_pair)
{
f1 <- pair[1]
f2 <- pair[2]
if (!(f1 %in% toRemove) & !(f2 %in% toRemove)) {
if (all(dataset[[f1]] == dataset[[f2]])) {
cat(f1, "and", f2, "are equals.\n")
toRemove <- c(toRemove, f2)
}
}
}
feature.names <- setdiff(names(dataset), toRemove)
dim(dataset)
#dim(test)
dataset <- dataset[, feature.names]
dim(dataset)
head(dataset)
source('~/Git_Pragati/DeepCustomerSatisfaction/glm_final.R', echo=TRUE)
install.packages("glmnet")
source('~/Git_Pragati/DeepCustomerSatisfaction/glm_final.R', echo=TRUE)
install.packages("caret")
source('~/Git_Pragati/DeepCustomerSatisfaction/glm_final.R', echo=TRUE)
source('~/Git_Pragati/DeepCustomerSatisfaction/glm_final.R', echo=TRUE)
preprocessed.train
head(preprocessed.train[[1]])
source('~/Git_Pragati/DeepCustomerSatisfaction/glm_final.R', echo=TRUE)
head(test)
predGLM(train, 0.2)
train$TARGET
predGLM(train, 0.2)
sample(which(train$TARGET == 0),1000)
subvalid0=train[sample(which(train$TARGET == 0),1000),]
predGLM(train, 0.2)
class(train)
predGLM(train=train,thresh= 0.2)
subtrain0=train[sample(which(train$TRAGET == 0),5000),]
subtrain0=train[sample(which(train$TARGET == 0),5000),]
subtrain1=train[which(train$TARGET==1),]
#subtrain1=train[sample(which(train.y == 1),1000),]
subtrain=rbind(subtrain0,subtrain1)
subvalid0=train[sample(which(train$TARGET == 0),1000),]
subvalid1=train[sample(which(train$TARGET == 1),1000),]
subvalid=rbind(subvalid0,subvalid1)
pca.d <- doPCA(subtrain, subvalid)
st.pca <- prcomp(train, center = TRUE, scale. = TRUE)
st.pca <- prcomp(subtrain, center = TRUE, scale. = TRUE)
pca.d <- doPCA(train, test)
names(train)
names(test)
pca.d <- doPCA(train[, 1:(ncol(train)-1)], test)
train <- read.csv('santander/train.csv',na.strings=c(""))
preprocessed.train = preprocess(train, TRUE)
train <- preprocessed.train[[1]]
names(train)
train <- read.csv('santander/train.csv',na.strings=c(""))
test <- read.csv('santander/test.csv',na.strings=c(""))
train.id = train$ID
train.y <- train$TARGET
test.id = test$ID
train$TARGET <- NULL
dataset$ID <- NULL
toRemove=preprocess(train)
preprocess <- function(dataset ){
#test$ID <- NULL
# Removing constant values
toRemove <- c()
for(colname in names(dataset))
{
if(length(unique(dataset[[colname]]))==1)
{
toRemove <- c(toRemove, colname)
#dataset[[colname]] <- NULL
#test[[colname]] <- NULL
}
}
features_pair <- combn(names(dataset), 2, simplify = F)
for(pair in features_pair)
{
f1 <- pair[1]
f2 <- pair[2]
if (!(f1 %in% toRemove) & !(f2 %in% toRemove)) {
if (all(dataset[[f1]] == dataset[[f2]])) {
cat(f1, "and", f2, "are equals.\n")
toRemove <- c(toRemove, f2)
}
}
}
#feature.names <- setdiff(names(dataset), toRemove)
dim(dataset)
#dim(test)
#dataset <- dataset[, feature.names]
return(toRemove)
}
train.id = train$ID
train.y <- train$TARGET
test.id = test$ID
train$TARGET <- NULL
train$ID <- NULL
toRemove=preprocess(train)
feature.names <- setdiff(names(train), toRemove)
train <- train[, feature.names]
test <- test[, feature.names]
pca.d <- doPCA(train, test)
doPCA <- function(train, test ){
#test <- test[, feature.names]
st.pca <- prcomp(train, center = TRUE, scale. = TRUE)
st.pca.pred <- predict(st.pca, test)
train <- as.data.frame(st.pca$x[,1:10])
test <- as.data.frame(st.pca.pred[,1:10])
return(list(train,test))
}
pca.train <- pca.d[[1]]
pca.test <- pca.d[[2]]
train$TARGET <- train.y
pca.train$TARGET <- train.y
predGLM(train=pca.d[[1]],thresh= 0.2)
predGLM(train=pca.train,thresh= 0.2)
names(pca.d[[1]])
names(pca.train)
pca.train$TARGET <- train.y
head(pca.train)
pca.train$TARGET = train.y
head(pca.train)
train <- read.csv('santander/train.csv',na.strings=c(""))
test <- read.csv('santander/test.csv',na.strings=c(""))
train.id = train$ID
train.y <- train$TARGET
test.id = test$ID
train$TARGET <- NULL
train$ID <- NULL
test$ID <- NULL
toRemove=preprocess(train)
feature.names <- setdiff(names(train), toRemove)
train <- train[, feature.names]
test <- test[, feature.names]
#preprocessed.test = preprocess(test, FALSE)
#test <- preprocessed.test[[1]]
pca.d <- doPCA(train, test)
pca.train <- pca.d[[1]]
pca.test <- pca.d[[2]]
train$TARGET <- train.y
pca.train$TARGET = train.y
head(pca.train)
predGLM(train=pca.train,thresh= 0.2)
subtrain0=train[sample(which(train$TARGET == 0),5000),]
subtrain0=pca.train[sample(which(pca.train$TARGET == 0),5000),]
subtrain1=pca.train[which(pca.train$TARGET==1),]
subtrain=rbind(subtrain0,subtrain1)
subvalid0=pca.train[sample(which(pca.train$TARGET == 0),1000),]
subvalid1=pca.train[sample(which(pca.train$TARGET == 1),1000),]
subvalid=rbind(subvalid0,subvalid1)
glmModel <- glm(TARGET ~ .,family=binomial(link='logit'),data=subtrain)
predGLM(train=pca.train,thresh= 0.2)
predGLM <- function(trainloc, thresh){
subtrain0=trainloc[sample(which(trainloc$TARGET == 0),5000),]
subtrain1=trainloc[which(trainloc$TARGET==1),]
#subtrain1=train[sample(which(train.y == 1),1000),]
subtrain=rbind(subtrain0,subtrain1)
subvalid0=trainloc[sample(which(trainloc$TARGET == 0),1000),]
subvalid1=trainloc[sample(which(trainloc$TARGET == 1),1000),]
subvalid=rbind(subvalid0,subvalid1)
#pca.d <- doPCA(subtrain, subvalid)
#subtrain <- pca.d[[1]]
#subvalid <- pca.d[[2]]
glmModel <- glm(TARGET ~ .,family=binomial(link='logit'),data=subtrain)
pred <- predict(glmModel,newdata=subvalid,type='response')
hist(pred)
pred <- ifelse(pred > thresh,1,0)
print(caret::confusionMatrix(pred.n,subvalid$TARGET))
roc(pred, subvalid$TARGET)
}
predGLM(train=pca.train,thresh= 0.2)
predGLM <- function(trainloc, thresh){
subtrain0=trainloc[sample(which(trainloc$TARGET == 0),5000),]
subtrain1=trainloc[which(trainloc$TARGET==1),]
#subtrain1=train[sample(which(train.y == 1),1000),]
subtrain=rbind(subtrain0,subtrain1)
subvalid0=trainloc[sample(which(trainloc$TARGET == 0),1000),]
subvalid1=trainloc[sample(which(trainloc$TARGET == 1),1000),]
subvalid=rbind(subvalid0,subvalid1)
#pca.d <- doPCA(subtrain, subvalid)
#subtrain <- pca.d[[1]]
#subvalid <- pca.d[[2]]
glmModel <- glm(TARGET ~ .,family=binomial(link='logit'),data=subtrain)
pred <- predict(glmModel,newdata=subvalid,type='response')
hist(pred)
pred <- ifelse(pred > thresh,1,0)
print(caret::confusionMatrix(pred,subvalid$TARGET))
roc(pred, subvalid$TARGET)
}
predGLM(train=pca.train,thresh= 0.2)
install.packages("pROC")
library(pROC)
predGLM(train=pca.train,thresh= 0.2)
predGLMLasso <- function(train, thresh){
subtrain0=train[sample(which(train$TARGET == 0),5000),]
subtrain1=train[which(train$TARGET==1),]
#subtrain1=train[sample(which(train.y == 1),1000),]
subtrain=rbind(subtrain0,subtrain1)
subvalid0=train[sample(which(train$TARGET == 0),1000),]
subvalid1=train[sample(which(train$TARGET == 1),1000),]
subvalid=rbind(subvalid0,subvalid1)
X=as.matrix(subtrain[,1:(ncol(subtrain)-1)])
y=subtrain$TARGET
#newdata=data.frame( x=X, y=y)
#bestAIC= bestglm(newdata, family=binomial, IC="BIC", nvmax=10)
cv <- cv.glmnet(X,y)
#model=glmnet(X,y,family = "binomial",lambda=cv$lambda.min)
result <- glmnet(X, as.factor(y), family = "binomial", alpha=1)
pred=predict(result, as.matrix(subvalid[,2:(ncol(subvalid)-1)]), type="response", s=cv$lambda.min)
hist(pred)
pred.n <- ifelse(pred > thresh,1,0)
print(confusionMatrix(pred.n, as.factor(subvalid[,ncol(subvalid)])))
roc(as.vector(pred.n), subvalid.y)
}
predGLMLasso(train=train, thresh=0.3)
subtrain0=train[sample(which(train$TARGET == 0),5000),]
subtrain1=train[which(train$TARGET==1),]
#subtrain1=train[sample(which(train.y == 1),1000),]
subtrain=rbind(subtrain0,subtrain1)
subvalid0=train[sample(which(train$TARGET == 0),1000),]
subvalid1=train[sample(which(train$TARGET == 1),1000),]
subvalid=rbind(subvalid0,subvalid1)
X=as.matrix(subtrain[,1:(ncol(subtrain)-1)])
y=subtrain$TARGET
#newdata=data.frame( x=X, y=y)
#bestAIC= bestglm(newdata, family=binomial, IC="BIC", nvmax=10)
cv <- cv.glmnet(X,y)
#model=glmnet(X,y,family = "binomial",lambda=cv$lambda.min)
result <- glmnet(X, as.factor(y), family = "binomial", alpha=1)
pred=predict(result, as.matrix(subvalid[,2:(ncol(subvalid)-1)]), type="response", s=cv$lambda.min)
pred=predict(result, as.matrix(subvalid[,1:(ncol(subvalid)-1)]), type="response", s=cv$lambda.min)
hist(pred)
pred.n <- ifelse(pred > thresh,1,0)
predGLMLasso <- function(train, thresh){
subtrain0=train[sample(which(train$TARGET == 0),5000),]
subtrain1=train[which(train$TARGET==1),]
#subtrain1=train[sample(which(train.y == 1),1000),]
subtrain=rbind(subtrain0,subtrain1)
subvalid0=train[sample(which(train$TARGET == 0),1000),]
subvalid1=train[sample(which(train$TARGET == 1),1000),]
subvalid=rbind(subvalid0,subvalid1)
X=as.matrix(subtrain[,1:(ncol(subtrain)-1)])
y=subtrain$TARGET
#newdata=data.frame( x=X, y=y)
#bestAIC= bestglm(newdata, family=binomial, IC="BIC", nvmax=10)
cv <- cv.glmnet(X,y)
#model=glmnet(X,y,family = "binomial",lambda=cv$lambda.min)
result <- glmnet(X, as.factor(y), family = "binomial", alpha=1)
pred=predict(result, as.matrix(subvalid[,1:(ncol(subvalid)-1)]), type="response", s=cv$lambda.min)
hist(pred)
pred.n <- ifelse(pred > thresh,1,0)
print(confusionMatrix(pred.n, as.factor(subvalid[,ncol(subvalid)])))
roc(as.vector(pred.n), subvalid.y)
}
predGLMLasso(train=train, thresh=0.3)
predGLMLasso <- function(train, thresh){
subtrain0=train[sample(which(train$TARGET == 0),5000),]
subtrain1=train[which(train$TARGET==1),]
#subtrain1=train[sample(which(train.y == 1),1000),]
subtrain=rbind(subtrain0,subtrain1)
subvalid0=train[sample(which(train$TARGET == 0),1000),]
subvalid1=train[sample(which(train$TARGET == 1),1000),]
subvalid=rbind(subvalid0,subvalid1)
X=as.matrix(subtrain[,1:(ncol(subtrain)-1)])
y=subtrain$TARGET
#newdata=data.frame( x=X, y=y)
#bestAIC= bestglm(newdata, family=binomial, IC="BIC", nvmax=10)
cv <- cv.glmnet(X,y)
#model=glmnet(X,y,family = "binomial",lambda=cv$lambda.min)
result <- glmnet(X, as.factor(y), family = "binomial", alpha=1)
pred=predict(result, as.matrix(subvalid[,1:(ncol(subvalid)-1)]), type="response", s=cv$lambda.min)
hist(pred)
pred.n <- ifelse(pred > thresh,1,0)
print(confusionMatrix(pred.n, as.factor(subvalid[,ncol(subvalid)])))
roc(as.vector(pred.n), as.vector((subvalid[,ncol(subvalid)])))
}
predGLMLasso(train=train, thresh=0.3)
source('~/Git_Pragati/DeepCustomerSatisfaction/glm_final.R', echo=TRUE)
source('~/Git_Pragati/DeepCustomerSatisfaction/glm_final.R', echo=TRUE)
source('~/Git_Pragati/DeepCustomerSatisfaction/glm_final.R', echo=TRUE)
head(pca.test)
source('~/Git_Pragati/DeepCustomerSatisfaction/glm_final.R', echo=TRUE)
